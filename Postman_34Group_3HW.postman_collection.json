{
	"info": {
		"_postman_id": "5b15b453-4366-40bc-bee2-3a367e4fd980",
		"name": "Postman_34Group_3HW",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22821760"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"\r",
							"let token_hw = jsonData.token\r",
							"\r",
							"pm.environment.set(\"auth_token\", token_hw);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "vitali",
							"type": "text"
						},
						{
							"key": "password",
							"value": "a1a1a1",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5006/login",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5006",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"//2) Проверка структуры json в ответе.\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"default\": {},\r",
							"    \"title\": \"Root Schema\",\r",
							"    \"required\": [\r",
							"        \"person\",\r",
							"        \"qa_salary_after_12_months\",\r",
							"        \"qa_salary_after_6_months\",\r",
							"        \"start_qa_salary\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"person\": {\r",
							"            \"type\": \"object\",\r",
							"            \"default\": {},\r",
							"            \"title\": \"The person Schema\",\r",
							"            \"required\": [\r",
							"                \"u_age\",\r",
							"                \"u_name\",\r",
							"                \"u_salary_1_5_year\"\r",
							"            ],\r",
							"            \"properties\": {\r",
							"                \"u_age\": {\r",
							"                    \"type\": \"integer\",\r",
							"                    \"default\": 0,\r",
							"                    \"title\": \"The u_age Schema\",\r",
							"                   \r",
							"                },\r",
							"                \"u_name\": {\r",
							"                    \"type\": \"array\",\r",
							"                    \"default\": [],\r",
							"                    \"title\": \"The u_name Schema\",\r",
							"                    \"items\": {\r",
							"                        \"anyOf\": [{\r",
							"                            \"type\": \"string\",\r",
							"                            \"default\": \"\",\r",
							"                            \"title\": \"A Schema\",\r",
							"                            \r",
							"                        },\r",
							"                        {\r",
							"                            \"type\": \"integer\",\r",
							"                            \"title\": \"A Schema\",\r",
							"                            \r",
							"                        }]\r",
							"                    },\r",
							"                    \r",
							"                },\r",
							"                \"u_salary_1_5_year\": {\r",
							"                    \"type\": \"integer\",\r",
							"                    \"default\": 0,\r",
							"                    \"title\": \"The u_salary_1_5_year Schema\",\r",
							"                  \r",
							"                }\r",
							"            },\r",
							"            \r",
							"        },\r",
							"        \"qa_salary_after_12_months\": {\r",
							"            \"type\": \"number\",\r",
							"            \"default\": 0.0,\r",
							"            \"title\": \"The qa_salary_after_12_months Schema\",\r",
							"          \r",
							"        },\r",
							"        \"qa_salary_after_6_months\": {\r",
							"            \"type\": \"integer\",\r",
							"            \"default\": 0,\r",
							"            \"title\": \"The qa_salary_after_6_months Schema\",\r",
							"           \r",
							"        },\r",
							"        \"start_qa_salary\": {\r",
							"            \"type\": \"integer\",\r",
							"            \"default\": 0,\r",
							"            \"title\": \"The start_qa_salary Schema\",\r",
							"            \r",
							"        }\r",
							"    },\r",
							"    \r",
							"}\r",
							"\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"//3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"pm.test('Check coefficient *1 start_qa_salary', function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(1000)\r",
							"});\r",
							"\r",
							"pm.test('Check coefficient *2 qa_salary_after_6_months', function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(jsonData.start_qa_salary*2)\r",
							"});\r",
							"\r",
							"pm.test('Check coefficient *2,9 qa_salary_after_6_months', function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(jsonData.start_qa_salary*2.9)\r",
							"});\r",
							"\r",
							"pm.test('Check coefficient *4 u_salary_1_5_year', function () {\r",
							"    pm.expect(jsonData.person.u_salary_1_5_year).to.eql(jsonData.start_qa_salary*4)\r",
							"});\r",
							"\r",
							"//4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"\r",
							"let salary_hw = jsonData.person.u_salary_1_5_year;\r",
							"\r",
							"pm.environment.set(\"salary\", salary_hw);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\": \"33\",\r\n    \"salary\": \"1000\",\r\n    \"name\": \"vitali\",\r\n    \"auth_token\": \"{{auth_token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5006/user_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5006",
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"//2) Проверка структуры json в ответе.\r",
							"\r",
							"let jsonData_1 = pm.response.json();\r",
							"\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"default\": {},\r",
							"    \"title\": \"Root Schema\",\r",
							"    \"required\": [\r",
							"        \"age\",\r",
							"        \"name\",\r",
							"        \"salary\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"age\": {\r",
							"            \"type\": \"integer\",\r",
							"            \"default\": 0,\r",
							"            \"title\": \"The age Schema\",\r",
							"            \r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\",\r",
							"            \"default\": \"\",\r",
							"            \"title\": \"The name Schema\",\r",
							"            \r",
							"        },\r",
							"        \"salary\": {\r",
							"            \"type\": \"array\",\r",
							"            \"default\": [],\r",
							"            \"title\": \"The salary Schema\",\r",
							"            \"items\": {\r",
							"                \"anyOf\": [{\r",
							"                    \"type\": \"integer\",\r",
							"                    \"default\": 0,\r",
							"                    \"title\": \"A Schema\",\r",
							"\r",
							"                },\r",
							"                {\r",
							"                    \"type\": \"string\",\r",
							"                    \"title\": \"A Schema\",\r",
							"\r",
							"                }]\r",
							"            },\r",
							"\r",
							"        }\r",
							"    },\r",
							"\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(jsonData_1, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"//3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"pm.test('Check coefficient *1 salary', function () {\r",
							"    pm.expect(jsonData_1.salary[0]).to.eql(1000)\r",
							"});\r",
							"\r",
							"pm.test('Check coefficient *2 salary', function () {\r",
							"    pm.expect(+jsonData_1.salary[1]).to.eql(jsonData_1.salary[0]*2)\r",
							"});\r",
							"\r",
							"pm.test('Check coefficient *3 salary', function () {\r",
							"    pm.expect(+jsonData_1.salary[2]).to.eql(jsonData_1.salary[0]*3)\r",
							"});\r",
							"\r",
							"//4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"\r",
							"pm.test('2 item of array > 1', function () {\r",
							"    pm.expect(+jsonData_1.salary[2]).not.to.be.below(+jsonData_1.salary[1])\r",
							"});\r",
							"\r",
							"pm.test('2 item of array > 0', function () {\r",
							"    pm.expect(+jsonData_1.salary[2]).not.to.be.below(+jsonData_1.salary[0])\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Vitali",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5006/new_data",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5006",
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"//2) Проверка структуры json в ответе.\r",
							"\r",
							"let jsonData_2 = pm.response.json();\r",
							"\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"default\": {},\r",
							"    \"title\": \"Root Schema\",\r",
							"    \"required\": [\r",
							"        \"age\",\r",
							"        \"daily_food\",\r",
							"        \"daily_sleep\",\r",
							"        \"name\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"age\": {\r",
							"            \"type\": \"integer\",\r",
							"            \"default\": 0,\r",
							"            \"title\": \"The age Schema\",\r",
							"\r",
							"        },\r",
							"        \"daily_food\": {\r",
							"            \"type\": \"number\",\r",
							"            \"default\": 0.0,\r",
							"            \"title\": \"The daily_food Schema\",\r",
							"\r",
							"        },\r",
							"        \"daily_sleep\": {\r",
							"            \"type\": \"number\",\r",
							"            \"default\": 0.0,\r",
							"            \"title\": \"The daily_sleep Schema\",\r",
							"\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\",\r",
							"            \"default\": \"\",\r",
							"            \"title\": \"The name Schema\",\r",
							"\r",
							"        }\r",
							"    },\r",
							"\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(jsonData_2, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"//3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"let reqWeight = request.data.weight;\r",
							"\r",
							"pm.test('Check coefficient * 0.012 weight', function () {\r",
							"    pm.expect(jsonData_2.daily_food).to.eql(reqWeight*0.012)\r",
							"});\r",
							"\r",
							"pm.test('Check coefficient * 2.5 weight', function () {\r",
							"    pm.expect(jsonData_2.daily_sleep).to.eql(reqWeight*2.5)\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "85",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Vitali",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5006/test_pet_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5006",
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"//2) Проверка структуры json в ответе.\r",
							"\r",
							"let jsonData_3 = pm.response.json();\r",
							"\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"default\": {},\r",
							"    \"title\": \"Root Schema\",\r",
							"    \"required\": [\r",
							"        \"age\",\r",
							"        \"family\",\r",
							"        \"name\",\r",
							"        \"salary\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"age\": {\r",
							"            \"type\": \"string\",\r",
							"            \"default\": \"\",\r",
							"            \"title\": \"The age Schema\",\r",
							"            \"examples\": [\r",
							"                \"33\"\r",
							"            ]\r",
							"        },\r",
							"        \"family\": {\r",
							"            \"type\": \"object\",\r",
							"            \"default\": {},\r",
							"            \"title\": \"The family Schema\",\r",
							"            \"required\": [\r",
							"                \"children\",\r",
							"                \"u_salary_1_5_year\"\r",
							"            ],\r",
							"            \"properties\": {\r",
							"                \"children\": {\r",
							"                    \"type\": \"array\",\r",
							"                    \"default\": [],\r",
							"                    \"title\": \"The children Schema\",\r",
							"                    \"items\": {\r",
							"                        \"type\": \"array\",\r",
							"                        \"title\": \"A Schema\",\r",
							"                        \"items\": {\r",
							"                            \"anyOf\": [{\r",
							"                                \"type\": \"string\",\r",
							"                                \"title\": \"A Schema\",\r",
							"                                \"examples\": [\r",
							"                                    \"Alex\",\r",
							"                                    \"Kate\"\r",
							"                                ]\r",
							"                            },\r",
							"                            {\r",
							"                                \"type\": \"integer\",\r",
							"                                \"title\": \"A Schema\",\r",
							"                                \"examples\": [\r",
							"                                    24,\r",
							"                                    12\r",
							"                                ]\r",
							"                            }]\r",
							"                        },\r",
							"                        \"examples\": [\r",
							"                            [\"Alex\",\r",
							"                                24\r",
							"                            ],\r",
							"                            [\"Kate\",\r",
							"                                12\r",
							"                            ]\r",
							"                        ]\r",
							"                    },\r",
							"                    \"examples\": [\r",
							"                        [\r",
							"                            [\"Alex\",\r",
							"                                24\r",
							"                            ],\r",
							"                            [\"Kate\",\r",
							"                                12\r",
							"                            ]\r",
							"                        ]\r",
							"                    ]\r",
							"                },\r",
							"                \"u_salary_1_5_year\": {\r",
							"                    \"type\": \"integer\",\r",
							"                    \"default\": 0,\r",
							"                    \"title\": \"The u_salary_1_5_year Schema\",\r",
							"                    \"examples\": [\r",
							"                        4000\r",
							"                    ]\r",
							"                }\r",
							"            },\r",
							"            \"examples\": [{\r",
							"                \"children\": [\r",
							"                    [\"Alex\",\r",
							"                        24\r",
							"                    ],\r",
							"                    [\"Kate\",\r",
							"                        12\r",
							"                    ]\r",
							"                ],\r",
							"                \"u_salary_1_5_year\": 4000\r",
							"            }]\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\",\r",
							"            \"default\": \"\",\r",
							"            \"title\": \"The name Schema\",\r",
							"            \"examples\": [\r",
							"                \"Vitali\"\r",
							"            ]\r",
							"        },\r",
							"        \"salary\": {\r",
							"            \"type\": \"integer\",\r",
							"            \"default\": 0,\r",
							"            \"title\": \"The salary Schema\",\r",
							"            \"examples\": [\r",
							"                1000\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    \"examples\": [{\r",
							"        \"age\": \"33\",\r",
							"        \"family\": {\r",
							"            \"children\": [\r",
							"                [\"Alex\",\r",
							"                    24\r",
							"                ],\r",
							"                [\"Kate\",\r",
							"                    12\r",
							"                ]\r",
							"            ],\r",
							"            \"u_salary_1_5_year\": 4000\r",
							"        },\r",
							"        \"name\": \"Vitali\",\r",
							"        \"salary\": 1000\r",
							"    }]\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(jsonData_3, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"//3) Проверить что занчение поля name = значению переменной name из окружения\r",
							"\r",
							"//Добавление переменных в окружение.\r",
							"let resSalary = jsonData_3.salary;\r",
							"pm.environment.set(\"salary\", resSalary);\r",
							"let resName = jsonData_3.name;\r",
							"pm.environment.set(\"name\", resName);\r",
							"let resAge = jsonData_3.age;\r",
							"pm.environment.set(\"age\", resAge);\r",
							"\r",
							"\r",
							"pm.test('Check name from environment', function () {\r",
							"    pm.expect(jsonData_3.name).to.eql(pm.environment.get(\"name\"));\r",
							"});\r",
							"\r",
							"//4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"\r",
							"pm.test('Comparison of data age from response and request', function () {\r",
							"    pm.expect(jsonData_3.age).to.eql(request.data.age);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5006/get_test_user",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5006",
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Можете взять любой объект из присланного списка, используйте js random.\r",
							"//В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
							"\r",
							"let jsonData_4 = pm.response.json();\r",
							"\r",
							"let randomId = Math.floor(Math.random() * (jsonData_4.length-1));\r",
							"\r",
							"let random_Cur_ID = jsonData_4[randomId].Cur_ID;\r",
							"\r",
							"pm.environment.set(\"currency_id\", random_Cur_ID);\r",
							"\r",
							"let describtion_random_id_currency = jsonData_4[random_Cur_ID].Cur_Abbreviation;\r",
							"\r",
							"console.log(random_Cur_ID);\r",
							"console.log(describtion_random_id_currency);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://54.157.99.22:80/currency",
					"protocol": "http",
					"host": [
						"54",
						"157",
						"99",
						"22"
					],
					"port": "80",
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2) Проверка структуры json в ответе.\r",
							"\r",
							"let jsonData_5 = pm.response.json();\r",
							"let token = pm.environment.get('token')\r",
							"\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"default\": {},\r",
							"    \"title\": \"Root Schema\",\r",
							"    \"required\": [\r",
							"        \"Cur_Abbreviation\",\r",
							"        \"Cur_ID\",\r",
							"        \"Cur_Name\",\r",
							"        \"Cur_OfficialRate\",\r",
							"        \"Cur_Scale\",\r",
							"        \"Date\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"Cur_Abbreviation\": {\r",
							"            \"type\": \"string\",\r",
							"            \"default\": \"\",\r",
							"            \"title\": \"The Cur_Abbreviation Schema\",\r",
							"        },\r",
							"        \"Cur_ID\": {\r",
							"            \"type\": \"integer\",\r",
							"            \"default\": 0,\r",
							"            \"title\": \"The Cur_ID Schema\",\r",
							"        },\r",
							"        \"Cur_Name\": {\r",
							"            \"type\": \"string\",\r",
							"            \"default\": \"\",\r",
							"            \"title\": \"The Cur_Name Schema\",\r",
							"        },\r",
							"        \"Cur_OfficialRate\": {\r",
							"            \"type\": \"number\",\r",
							"            \"default\": 0.0,\r",
							"            \"title\": \"The Cur_OfficialRate Schema\",\r",
							"        },\r",
							"        \"Cur_Scale\": {\r",
							"            \"type\": \"integer\",\r",
							"            \"default\": 0,\r",
							"            \"title\": \"The Cur_Scale Schema\",\r",
							"        },\r",
							"        \"Date\": {\r",
							"            \"type\": \"string\",\r",
							"            \"default\": \"\",\r",
							"            \"title\": \"The Date Schema\",\r",
							"        }\r",
							"    },\r",
							"\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(jsonData_5, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"for (let i = 0; i < jsonData_5.lenght; i ++){\r",
							"    cur_id = jsonData_5[i].Cur_ID;\r",
							"\r",
							"\r",
							"const postRequest = {\r",
							"    url: 'http://54.157.99.22:80/curr_byn',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json',\r",
							"    },\r",
							"    body: {\r",
							"        mode: 'formdata',\r",
							"        formdata: [\r",
							"        {key: 'auth_token', value: token},\r",
							"        {key: 'curr_code', value: '${cur_id}'}\r",
							"        ]}\r",
							"    };\r",
							"\r",
							"pm.sendRequest(postRequest,(err,response) => {\r",
							"    if (pm.response.code === 200){\r",
							"        let r = responce.json();\r",
							"        console.log(r);\r",
							"        if (jsonData_5.hasOwnProperty(\"Cur_OfficialRate\"))\r",
							"        {console.log(jsonData_5)}\r",
							"    }\r",
							"    if (pm.response.code === 500){\r",
							"        return\r",
							"    }\r",
							"    else {console.log('error')}\r",
							"})\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{currency_id}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://54.157.99.22:80/curr_byn",
					"protocol": "http",
					"host": [
						"54",
						"157",
						"99",
						"22"
					],
					"port": "80",
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	]
}